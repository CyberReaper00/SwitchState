---
 config.def.h | 24 +++++++++-------
 dwm.c        | 81 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 95 insertions(+), 10 deletions(-)

diff --git a/config.def.h b/config.def.h
index 4412cb1..c15abe3 100644
--- a/config.def.h
+++ b/config.def.h
@@ -7,17 +7,21 @@ static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
-static const char *colors[][3]      = {
-	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+
+static const char *blue[] = {
+"#FFFFFF",
+"#0E1C4A",
+"#3E54BD"
+};
+
+static const char *red[] = {
+"#FFFFFF",
+"#430B07",
+"#73493D"
 };
 
+static const char **current_theme = blue;
+
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
@@ -57,7 +61,7 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static const char *dmenucmd[] = { "dmenu_run", NULL };
 static const char *termcmd[]  = { "st", NULL };
 
 static const Key keys[] = {
diff --git a/dwm.c b/dwm.c
index 1443802..231980a 100644
--- a/dwm.c
+++ b/dwm.c
@@ -32,6 +32,7 @@
 #include <sys/wait.h>
 #include <X11/cursorfont.h>
 #include <X11/keysym.h>
+#include <X11/XF86keysym.h>
 #include <X11/Xatom.h>
 #include <X11/Xlib.h>
 #include <X11/Xproto.h>
@@ -40,6 +41,7 @@
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
 #include <X11/Xft/Xft.h>
+#include <pthread.h>
 
 #include "drw.h"
 #include "util.h"
@@ -270,6 +272,82 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+extern const char **current_theme;
+const char *colors[2][3]; // [Scheme][bg, fg, border]
+
+pthread_mutex_t theme_mutex = PTHREAD_MUTEX_INITIALIZER;
+
+/* === COLOR UPDATE === */
+void update_colors(void) {
+	pthread_mutex_lock(&theme_mutex);
+
+	colors[SchemeNorm][0] = current_theme[0];
+	colors[SchemeNorm][1] = current_theme[1];
+	colors[SchemeNorm][2] = current_theme[2];
+
+	colors[SchemeSel][0] = current_theme[0];
+	colors[SchemeSel][1] = current_theme[2];
+	colors[SchemeSel][2] = current_theme[2];
+
+	printf("Theme updated: BG=%s FG=%s Border=%s\n",
+	       current_theme[0], current_theme[1], current_theme[2]);
+
+	pthread_mutex_unlock(&theme_mutex);
+
+	for (Monitor *m = mons; m; m = m->next) {
+		drawbar(m);
+		arrange(m);
+	}
+}
+
+/* === CHARGING DETECTION === */
+int is_charging(void) {
+	const char *paths[] = {
+		"/sys/class/power_supply/AC/online",
+		"/sys/class/power_supply/ACAD/online",
+		"/sys/class/power_supply/ADP1/online"
+	};
+
+	for (int i = 0; i < sizeof(paths) / sizeof(paths[0]); ++i) {
+		FILE *f = fopen(paths[i], "r");
+		if (f) {
+			int status = 0;
+			fscanf(f, "%d", &status);
+			fclose(f);
+			return status;
+		}
+	}
+	fprintf(stderr, "Could not find AC status file.\n");
+	return 0;
+}
+
+/* === THEME CHECKING THREAD === */
+void *theme_checker(void *arg) {
+	int last_status = -1;
+	while (1) {
+		int charging = is_charging();
+		if (charging != last_status) {
+			pthread_mutex_lock(&theme_mutex);
+			current_theme = charging ? blue : red;
+			pthread_mutex_unlock(&theme_mutex);
+			update_colors();
+			last_status = charging;
+		}
+		usleep(1000000); // Sleep 1s
+	}
+	return NULL;
+}
+
+/* === THREAD STARTUP === */
+void start_theme_thread(void) {
+	pthread_t theme_thread;
+	if (pthread_create(&theme_thread, NULL, theme_checker, NULL) != 0) {
+		perror("Failed to create theme checker thread");
+	}
+	// Optionally detach the thread if you donâ€™t want to join later
+	pthread_detach(theme_thread);
+}
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -2151,12 +2229,15 @@ main(int argc, char *argv[])
 	if (!(dpy = XOpenDisplay(NULL)))
 		die("dwm: cannot open display");
 	checkotherwm();
+	update_colors();
 	setup();
 #ifdef __OpenBSD__
 	if (pledge("stdio rpath proc exec", NULL) == -1)
 		die("pledge");
 #endif /* __OpenBSD__ */
 	scan();
+	pthread_t theme_thread;
+	pthread_create(&theme_thread, NULL, theme_checker, NULL);
 	run();
 	cleanup();
 	XCloseDisplay(dpy);
-- 
2.50.0